<!DOCTYPE html>
<html>
	<head>
		<!-- A-Frame itself -->
		<script src="https://aframe.io/releases/1.4.0/aframe.min.js"></script>
		<!-- <script src="https://aframe.io/releases/1.0.4/aframe.min.js"></script> -->

		<!-- Pure three.js code that the A-Frame components use for location-based AR -->
		<script type="text/javascript" src="https://raw.githack.com/AR-js-org/AR.js/master/three.js/build/ar-threex-location-only.js"></script>

		<!-- AR.js A-Frame components -->
		<script type="text/javascript" src='https://raw.githack.com/AR-js-org/AR.js/master/aframe/build/aframe-ar.js'></script>
		
		<script src="https://cdnjs.cloudflare.com/ajax/libs/suncalc/1.8.0/suncalc.min.js"></script>
		
		<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
	</head>
	<body style="margin: 0;">
<script>
	AFRAME.registerComponent('sun-position', {
		  schema: {
			distance: { type: 'number', default: 200 },
			date: { type: 'string', default: '' },
			time: { type: 'string', default: '' },
			deviceAlpha: { type: 'number', default: 0 }
		  },

		  init: function () {
			const el = this.el;
			const lastTime = Date.now();

			// Set the deviceAlpha property to the initial alpha value from the deviceorientation event
		    window.addEventListener('deviceorientation', (event) => {
		      this.data.deviceAlpha = event.alpha;
		    });

			// Get the current position of the device
			navigator.geolocation.getCurrentPosition(position => {
			  this.updatePosition(position);
			});

			// Check if a date and time is selected by the user
			if (this.data.date && this.data.time) {
			  // Set the selected date and time
			  const selectedDate = new Date(this.data.date + 'T' + this.data.time);
			  this.updatePositionTime(selectedDate);
			}

			// New animate function instead of setInterval()
			this.animate = function(time) {
				// Calculate the time delta
				const deltaTime = (time - lastTime) / 1000;

				// Only update the position every 10 seconds
				if (deltaTime >= 10) {
					navigator.geolocation.getCurrentPosition(position => {
						this.updatePosition(position);
					});
					lastTime = time;
				}

				// Call requestAnimationFrame to animate the scene
				requestAnimationFrame(this.animate.bind(this));
			}

			//});
		  },

			updatePosition: function (position) {
			  const currentdate = new Date();

			  // Get the date and time selected by the user
			  const dateTimePicker = document.getElementById('date-time-picker');
			  const selectedDate = dateTimePicker.value ? new Date(dateTimePicker.value) : null;

			  if (selectedDate && !isNaN(selectedDate.getTime())) {
				  // Use the selected date and time
				  this.updatePositionTime(selectedDate);
			  } else {
				  // Use the current date and time
				  this.updatePositionTime(currentdate);
			  }
			},

			updatePositionTime: function (selectedDate) {
				navigator.geolocation.getCurrentPosition(position => {

					const { altitude, azimuth } = SunCalc.getPosition(selectedDate, position.coords.latitude, position.coords.longitude);
					// Logging
						console.log("Date used to position Sun: "+selectedDate);

					// Add a box at the GPS position, this used as the basepoint for relative position of the Sun
						const anchor = document.querySelector("#anchor");

						anchor.setAttribute('gps-new-entity-place', {
							latitude: position.coords.latitude,
							longitude: position.coords.longitude
						});

					// Calculate the X, Y, and Z coordinates of the sun sphere based on the alpha value
					const x = Math.sin(azimuth * Math.PI / 180) * Math.cos(altitude) * this.data.distance;
					const y = Math.sin(altitude) * this.data.distance;
					const z = Math.cos(azimuth * Math.PI / 180) * Math.cos(altitude) * this.data.distance;


					// Custom added
					const size = this.calculateSize(altitude)*8;

					// Logging
					console.log("Calculated Position: x:"+ x + " y:" + y + " z:" + z);

					// Set the position of the sphere
					this.el.setAttribute('position', { x, y, z });

					// Custom Added
					//this.el.setAttribute('scale', {x: size, y: size, z: size});
					this.el.setAttribute('scale', '5 5 5');

				});
			},

			calculateSize: function (altitude) {
				// Set the radius of the sphere to block the actual sun from the observer's point of view
				const sphereRadius = 0.53; // in degrees
				const observerHeight = 1.7; // in meters
				const objectHeight = Math.tan(altitude) * this.data.distance + observerHeight;
				const objectSize = sphereRadius / Math.atan(objectHeight / this.data.distance);

				return objectSize;
			}

		});
	window.onload = () => {
		
		// Get current device orientation and set rotation of scene
		var setSceneRotation = function(event) {
			var heading = event.alpha;
			if (heading !== null) {
				var sceneEl = document.querySelector('a-scene');
				sceneEl.setAttribute('rotation', '0 0 ' + (-heading * Math.PI / 180));
				console.log("Heading: " + heading + "\n Scene rotated");
			}
			// Remove event listener
			window.removeEventListener('deviceorientation', setSceneRotation, false);
		};
		window.addEventListener('deviceorientation', setSceneRotation, false);
		
	};
</script>
		<a-scene vr-mode-ui="enabled: false" arjs="sourceType: webcam; videoTexture: true; debugUIEnabled: false" renderer='antialias: true; alpha: true' inspector="url: https://cdn.jsdelivr.net/gh/aframevr/aframe-inspector@master/dist/aframe-inspector.min.js">
			<a-camera id="camera" gps-new-camera="gpsMinDistance: 5"></a-camera>
			<a-box id="anchor" color="grey" scale="0.5 0.5 0.5">
				<a-box id="north" color="blue" position="0 1 4" scale="1 1 1"></a-box>
				<a-sphere id="sun" color="yellow" sun-position></a-sphere>
			</a-box>
		</a-scene>
		
		<div style="position: absolute; top: 10px; right: 10px; z-index: 99999;">
			<label for="date-time-picker">Select a date and time:</label>
			<input type="datetime-local" id="date-time-picker" name="date-time-picker">
		</div>
	</body>
</html>
