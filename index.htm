<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <title>AR Solar Position</title>
    <script src="https://aframe.io/releases/1.2.0/aframe.min.js"></script>
    <script src="https://raw.githack.com/AR-js-org/AR.js/master/aframe/build/aframe-ar.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/suncalc/1.8.0/suncalc.min.js"></script>
  </head>
  <body>
    <a-scene>
      <a-entity position="0 1.6 0">
        <a-camera></a-camera>
        <a-entity position="0 -0.8 -2" id="compass"></a-entity>
      </a-entity>
      <a-sphere position="0 0 -5" radius="1.5" material="color: #EFEFEF; roughness: 1"></a-sphere>
      <a-sphere position="0 3 0" radius="0.5" material="color: #FDB813; roughness: 1"></a-sphere>
      <a-sphere position="-3 1 0" radius="1" material="color: #FDB813; roughness: 1"></a-sphere>
      <a-sphere position="3 1 0" radius="1" material="color: #FDB813; roughness: 1"></a-sphere>
    </a-scene>
    <script>
      // get the sun's position in the sky
      function getSunPosition() {
        const now = new Date();
        const lat = 37.7749; // latitude of San Francisco
        const lng = -122.4194; // longitude of San Francisco
        const zenith = 90.83333333333333; // sun's zenith for sunrise/sunset
        const sunrise = SunCalc.getTimes(now, lat, lng).sunrise;
        const sunset = SunCalc.getTimes(now, lat, lng).sunset;
        const currentTime = now.getTime();

        let sunPosition;
        if (currentTime > sunrise.getTime() && currentTime < sunset.getTime()) {
          sunPosition = SunCalc.getPosition(now, lat, lng);
        } else {
          sunPosition = { altitude: -100 };
        }
        return sunPosition;
      }

      // create the sun entity
      function createSun() {
        const sun = document.createElement('a-sphere');
        sun.setAttribute('radius', '1');
        sun.setAttribute('position', '0 0 -5');
        sun.setAttribute('material', 'color: #FDB813; roughness: 1');
        sun.setAttribute('visible', false);

        const sunPosition = getSunPosition();
        if (sunPosition.altitude > -90) {
          const azimuth = -sunPosition.azimuth * (180 / Math.PI);
          const altitude = sunPosition.altitude * (180 / Math.PI);
          sun.setAttribute('rotation', `${altitude} ${azimuth} 0`);
          sun.setAttribute('visible', true);
        } else {
          console.warn('The sun is below the horizon');
        }

        return sun;
      }

      // create the compass entity
		function createCompass() {
		  const compass = document.createElement('a-image');
		  compass.setAttribute('src', 'https://cdn.aframe.io/examples/arjs/compass.png');
		  compass.setAttribute('width', '1');
		  compass.setAttribute('height', '1');
		  compass.setAttribute('position', '0 0 0');
		  compass.setAttribute('rotation', '0 180 0');
		  return compass;
		}

		const compass = createCompass();
		document.querySelector('a-scene').appendChild(compass);
		compass.setAttribute('sun', '');

      const sun = createSun();
      document.querySelector('a-scene').appendChild(sun);
      
	 AFRAME.registerComponent('sun', {
	  init: function () {
		this.el.object3D.rotation.order = 'YXZ';
	  },

	  tick: function (time, delta) {
		try {
		  const sunPos = getSunPosition();

		  if (sunPos.altitude > 0) {
			const { azimuth, altitude } = sunPos;
			this.el.object3D.rotation.y = -THREE.Math.degToRad(azimuth);
			this.el.object3D.rotation.x = -THREE.Math.degToRad(altitude);
			this.el.object3D.rotation.z = 0;
			this.el.object3D.updateMatrixWorld();
		  }
		} catch (error) {
		  console.error('Error occurred while updating sun position:', error);
		}
	  }
	});
	  </script>
	  </ body>
</html>
