<!DOCTYPE html>
<html>
  <head>
    <title>SunPos</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
	  
	<script src="https://cdnjs.cloudflare.com/ajax/libs/suncalc/1.8.0/suncalc.min.js"></script>
	
    <script src="https://aframe.io/releases/1.2.0/aframe.min.js"></script>
	<script src="https://raw.githack.com/AR-js-org/AR.js/master/aframe/build/aframe-ar.js"></script>
    <script src="https://cdn.rawgit.com/donmccurdy/aframe-extras/v6.1.1/dist/aframe-extras.min.js"></script>
    
	
	
	<link rel="stylesheet" href="https://code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.min.js"></script>
    
    <style>
		/* make sure the canvas is always visible */
		canvas {
			display: block;
		}
	
		#datepicker {
			position: fixed;
			bottom: 0;
			left: 50%;
			transform: translateX(-50%);
			z-index: 9999;
		}
    </style>
  </head>
  <body>
    <h1>SunPos 0.12</h1>
    <label for="datepicker">Select a date:</label>
    <input type="text" id="datepicker">
    <script>
      $(function() {
        $("#datepicker").datepicker();
      });
	</script>
    <script>
		// Get the datetime input element
		var datetimeInput = document.getElementById("datepicker");

		// If the input is null, set the default value to the current date and time
		if (datetimeInput === null) {
			var now = new Date();
			datetimeInput.value = now.toISOString().slice(0, 16);
		}
    </script>
	<script>
	// Troubleshooting
	
		function onSceneLoaded() {
		  console.log('Scene loaded');
		  const sphere = document.getElementById('sphere');
		  const cone = document.getElementById('cone');
		  console.log(box);
		  console.log(sphere);
		  console.log(cone);

		  // Scale the sphere up by 2x
		  sphere.object3D.scale.set(2, 2, 2);
		}
</script>
    <script>
      // get DOM elements
      const datetimeInput = document.querySelector('#datepicker');
      //const sunTrajectory = document.querySelector('#sun-trajectory');

      // register sun object position component
      AFRAME.registerComponent('sun-object-position', {
        dependencies: ['position'],
        schema: {
          objHeight: {type: 'number', default: 1},
          objWidth: {type: 'number', default: 1}
        },
        update: function () {
          const datetime = new Date(datetimeInput.value);
          const sunPos = SunCalc.getPosition(datetime, this.el.getAttribute('position').x, this.el.getAttribute('position').y);
          const elevation = sunPos.altitude * 180 / Math.PI;
          const azimuth = sunPos.azimuth * 180 / Math.PI;
          const distance = sunPos.distance;
          const radius = Math.tan(this.el.sceneEl.camera.fov / 2 * Math.PI / 180) * distance;
          const scale = radius * this.data.objWidth * 2;

          this.el.setAttribute('rotation', {x: -elevation, y: azimuth, z: 0});
          this.el.setAttribute('scale', {x: scale, y: scale * this.data.objHeight, z: scale});

          // calculate sun position 3 hours before and after
          const beforeTime = new Date(datetime.getTime() - (3 * 60 * 60 * 1000));
          const beforeSunPos = SunCalc.getPosition(beforeTime, this.el.getAttribute('position').x, this.el.getAttribute('position').y);
          const beforeX = beforeSunPos.azimuth / Math.PI * -10;
          const beforeY = beforeSunPos.altitude / Math.PI * -10;

          const afterTime = new Date(datetime.getTime() + (3 * 60 * 60 * 1000));
          const afterSunPos = SunCalc.getPosition(afterTime, this.el.getAttribute('position').x, this.el.getAttribute('position').y);
          const afterX = afterSunPos.azimuth / Math.PI * -10;
          const afterY = afterSunPos.altitude / Math.PI * -10;

			// check if sunTrajectory exists
			if (!sunTrajectory) {
				const sunTrajectory = document.querySelector('#sun-trajectory');
				if (!sunTrajectory) {
					console.error('sunTrajectory entity not found!');
					return;
				}
			}


          // update sun trajectory
          sunTrajectory.setAttribute('line', `start: ${beforeX} ${beforeY} -10; end: 0 0 -10; color: yellow;`);
          sunTrajectory.setAttribute('line__2', `start: 0 0 -10; end: ${afterX} ${afterY} -10; color: yellow;`);
        }
      });
    </script>
	 <a-scene embedded arjs="sourceType: webcam; debugUIEnabled: true;">
      	<a-entity camera></a-entity>
      	<a-sphere position="0 0 0" radius="0.5" color="red" id="sun-object" sun-object-position></a-sphere>
		<a-cone position="0 1 0" radius-bottom="0.1" height="0.2" color="blue" look-at="#sun-object" scale="2 2 2"></a-cone>
      	<a-entity id="sun-trajectory" line="start: 0 0 0; end: 0 0 -10; color: yellow"></a-entity>
    </a-scene>
  </body>
</html>

